#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass ulb_thesis
\options draftfoot
\use_default_options false
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Formula $\textrm{SVOps}^{\vdash}=\left\{ x\vdash\mid x\in\textrm{SVars}\right\} $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\textrm{SVOps}^{\dashv}=\left\{ x\dashv\mid x\in\textrm{SVars}\right\} $
\end_inset


\end_layout

\begin_layout Standard
SVOps
\begin_inset Formula $=\textrm{SVOps}^{\vdash}\cup\textrm{SVOps}^{\dashv}$
\end_inset


\end_layout

\begin_layout Definition
An extended 
\emph on
variable-set automaton
\emph default
 (or 
\emph on
eVset-automaton
\emph default
) is a tuple 
\begin_inset Formula $\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Q$
\end_inset

 is a finite set of states;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{0}\in Q$
\end_inset

 is the initial state;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{f}\in Q$
\end_inset

 is an accepting state;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta=\delta^{char}\cup\delta^{op}$
\end_inset

 is a finite transition relation consisting of triples, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\delta^{char}=\left\{ \left(q,\sigma,q'\right)\mid q,q'\in Q,\sigma\in\varSigma\right\} $
\end_inset

, whose elments are called character transitions;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta^{op}=\left\{ \left(q,S,q'\right)\mid q,q'\in Q,S\subseteq\left(\textrm{SVOps}\right)\right\} $
\end_inset

, whose elements are called operation transitions .
\end_layout

\end_deeper
\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Definition
Given a string 
\begin_inset Formula $\mathbf{s}$
\end_inset

, 
\begin_inset Formula $\left|\mathbf{s}\right|=n$
\end_inset

, and an eVset-automaton 
\begin_inset Formula $A=\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

, a configuration of A is a tuple 
\begin_inset Formula $c=\left(q,V,Y,i\right)$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $q\in Q$
\end_inset

 is the current state;
\end_layout

\begin_layout Itemize
\begin_inset Formula $V\subseteq\textrm{SVars}\left(A\right)$
\end_inset

 is the active variable set;
\end_layout

\begin_layout Itemize
\begin_inset Formula $Y\subseteq\textrm{SVars}\left(A\right)$
\end_inset

 is the set of available variables;
\end_layout

\begin_layout Itemize
\begin_inset Formula $i$
\end_inset

 is an index belonging to 
\begin_inset Formula $\left\{ 1,\ldots,n+1\right\} $
\end_inset

.
\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Definition
Given a string 
\begin_inset Formula $\mathbf{s}=s_{1},\ldots,s_{n}$
\end_inset

 and an eVset-automaton 
\begin_inset Formula $A=\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

, a run 
\begin_inset Formula $\rho$
\end_inset

 of 
\begin_inset Formula $A$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

 is a sequence 
\begin_inset Formula $c_{0},\ldots,c_{m}$
\end_inset

 of configurations, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $c_{0}=\left(q_{0},\textrm{Ø},\textrm{SVars}\left(A\right),1\right)$
\end_inset

;
\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $j=0,\ldots,m-1$
\end_inset

 one of the following holds for 
\begin_inset Formula $c_{j}=\left(q_{j},V_{j},Y_{j},i_{j}\right)$
\end_inset

 and 
\begin_inset Formula $c_{j+1}=\left(q_{j+1},V_{j+1},Y_{j+1},i_{j+1}\right)$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $V_{j+1}=V_{j}$
\end_inset

, 
\begin_inset Formula $Y_{j+1}=Y_{j}$
\end_inset

, 
\begin_inset Formula $i_{j+1}=i_{j}+1$
\end_inset

 and 
\begin_inset Formula $\left(q_{j},s_{j}q_{j+1}\right)\in\delta^{char}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $i_{j+1}=i_{j}$
\end_inset

, and for some 
\begin_inset Formula $S\subseteq\textrm{SVOps}\left(A\right)$
\end_inset

 we have :
\end_layout

\begin_deeper
\begin_layout Itemize
for each 
\begin_inset Formula $x\in\textrm{SVars}\left(A\right)$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\left\{ x\vdash,\dashv x\right\} \cap S=\left\{ x\vdash\right\} $
\end_inset

 or 
\begin_inset Formula $\left\{ x\vdash,\dashv x\right\} \cap S=\left\{ x\vdash,\dashv x\right\} $
\end_inset

 if and only if 
\begin_inset Formula $x\in Y_{j}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left\{ x\vdash,\dashv x\right\} \cap S=\left\{ \dashv x\right\} $
\end_inset

 if and only if 
\begin_inset Formula $x\in V_{j}$
\end_inset

;
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $V_{j+1}=V_{j}\cup\left\{ x\mid x\vdash\in S\right\} \setminus\left\{ x\mid\dashv x\in S\right\} $
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $Y_{j+1}=Y_{j}\setminus\left\{ x\mid x\vdash\in S\right\} $
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(q_{j},S,q_{j+1}\right)\in\delta^{op}$
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Definition
\begin_inset Formula $\rho$
\end_inset

 is accepting if 
\begin_inset Formula $c_{m}=\left(q_{f},\textrm{Ø,}\textrm{Ø},n+1\right)$
\end_inset

.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
Given a transition 
\begin_inset Formula $t\in\delta$
\end_inset

 in an eVset-automaton 
\begin_inset Formula $A$
\end_inset

, and an ordering 
\begin_inset Formula $\varphi$
\end_inset

 on the elements of 
\begin_inset Formula $\textrm{SVOps}\left(A\right)$
\end_inset

, we define
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\textrm{Ops}\left(t\right)$
\end_inset

as either:
\end_layout

\begin_deeper
\begin_layout Itemize
if 
\begin_inset Formula $t=\left(q,S,q'\right)\in\delta^{op}$
\end_inset

, the set 
\begin_inset Formula $S$
\end_inset

;
\end_layout

\begin_layout Itemize
if 
\begin_inset Formula $t\in\delta^{char}$
\end_inset

, the empty set.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $\textrm{LOps}_{\varphi}\left(t\right)$
\end_inset

 as either:
\end_layout

\begin_deeper
\begin_layout Itemize
if 
\begin_inset Formula $t=\left(q,S,q'\right)\in\delta^{op}$
\end_inset

, the list 
\begin_inset Formula $o_{1},\ldots,o_{\left|S\right|}$
\end_inset

 of operations belonging to 
\begin_inset Formula $S$
\end_inset

, ordered according to 
\begin_inset Formula $\varphi$
\end_inset

;
\end_layout

\begin_layout Itemize
if 
\begin_inset Formula $t\in\delta^{char}$
\end_inset

, the empty list.
\end_layout

\end_deeper
\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Definition
\noindent
Given an extended vset-automaton 
\begin_inset Formula $A=\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

 and a pair of states 
\begin_inset Formula $q,q'\in Q$
\end_inset

, a path 
\begin_inset Formula $p$
\end_inset

 between 
\begin_inset Formula $q$
\end_inset

 and 
\begin_inset Formula $q'$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 is a sequence of transitions 
\begin_inset Formula $t_{1},$
\end_inset


\begin_inset Formula $\ldots,t_{n}\in\delta$
\end_inset

, such that:
\end_layout

\begin_deeper
\begin_layout Itemize
the source state of 
\begin_inset Formula $t_{1}$
\end_inset

 is 
\begin_inset Formula $q$
\end_inset

;
\end_layout

\begin_layout Itemize
the destination state of 
\begin_inset Formula $t_{n}$
\end_inset

 is 
\begin_inset Formula $q'$
\end_inset

;
\end_layout

\begin_layout Itemize
\noindent
for every pair 
\begin_inset Formula $t_{i},t_{i+1}$
\end_inset

, the destination state of 
\begin_inset Formula $t_{i}$
\end_inset

 equals the source state of 
\begin_inset Formula $t_{i+1}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Definition
We also write 
\begin_inset Formula $p_{q}^{q'}$
\end_inset

.
 We refer to the set of paths in 
\begin_inset Formula $A$
\end_inset

 as 
\begin_inset Formula $\textrm{Paths}\left(A\right)$
\end_inset

.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
Given a string 
\begin_inset Formula $\mathbf{s}$
\end_inset

, an eVset-automaton 
\begin_inset Formula $A=\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

, a run 
\begin_inset Formula $\rho=c_{0},$
\end_inset


\begin_inset Formula $\ldots,c_{m}$
\end_inset

 of 
\begin_inset Formula $A$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

 and a path 
\begin_inset Formula $p=t_{0},\ldots,t_{m-1}$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

, we say that 
\begin_inset Formula $p$
\end_inset

 supports 
\begin_inset Formula $\rho$
\end_inset

 if, for every pair 
\begin_inset Formula $c_{i}$
\end_inset

, 
\begin_inset Formula $c_{i+1}$
\end_inset

 of configurations, 
\begin_inset Formula $c_{i+1}$
\end_inset

is obtained from 
\begin_inset Formula $c_{i}$
\end_inset

 by applying 
\begin_inset Formula $t_{i}$
\end_inset

.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
Given a path 
\begin_inset Formula $p=t_{1},\ldots,t_{n}$
\end_inset

 in an eVset-automaton 
\begin_inset Formula $A$
\end_inset

, and considering an ordering 
\begin_inset Formula $\varphi$
\end_inset

 on the elements of 
\begin_inset Formula $\textrm{SVOps}\left(A\right)$
\end_inset

, we define
\end_layout

\begin_deeper
\begin_layout Itemize
the set 
\begin_inset Formula $\textrm{Ops}\left(p\right)$
\end_inset

 as
\begin_inset Formula 
\[
\bigcup_{i=1}^{n}\textrm{Ops}\left(t_{i}\right)
\]

\end_inset


\end_layout

\begin_layout Itemize
the list 
\begin_inset Formula $\textrm{LOps}_{\varphi}\left(p\right)$
\end_inset

 as
\begin_inset Formula 
\[
\bigoplus_{i=1}^{n}\textrm{LOps}_{\varphi}\left(t_{i}\right)
\]

\end_inset

where 
\begin_inset Formula $\bigoplus$
\end_inset

 is the usual list concatenation operator;
\end_layout

\end_deeper
\begin_layout Definition
If every transition in 
\begin_inset Formula $p$
\end_inset

 belongs to 
\begin_inset Formula $\delta^{op}$
\end_inset

, we say that 
\begin_inset Formula $p$
\end_inset

 is an operation-only path.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
\noindent
Given an eVset-automaton 
\begin_inset Formula $A=\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

, a path 
\begin_inset Formula $p=t_{1},\ldots,t_{n}$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 is complete if it is between 
\begin_inset Formula $q_{0}$
\end_inset

 and 
\begin_inset Formula $q_{f}$
\end_inset

.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
\noindent
\begin_inset CommandInset label
LatexCommand label
name "well-behaved"

\end_inset

An eVset-automaton 
\begin_inset Formula $A$
\end_inset

 is well-behaved if, for every complete path 
\begin_inset Formula $p$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 we have:
\end_layout

\begin_deeper
\begin_layout Enumerate
for every 
\begin_inset Formula $o\in\textrm{SVOps}\left(A\right)$
\end_inset

, 
\begin_inset Formula $o$
\end_inset

 appears exactly once in 
\begin_inset Formula $\textrm{LOps}\left(p\right)$
\end_inset

;
\begin_inset CommandInset label
LatexCommand label
name "enu:well-behaved-1,"

\end_inset


\end_layout

\begin_layout Enumerate
for every pair of operations 
\begin_inset Formula $x\vdash$
\end_inset

,
\begin_inset Formula $\dashv x$
\end_inset


\begin_inset Formula $\in\textrm{SVOps}\left(A\right)$
\end_inset

, 
\begin_inset Formula $x\vdash$
\end_inset

 appears before 
\begin_inset Formula $\dashv x$
\end_inset

 in 
\begin_inset Formula $\textrm{LOps}\left(p\right)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Definition
Given an eVset-automaton 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $A$
\end_inset

 is pruned if for every state 
\begin_inset Formula $q$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

, there is a path from 
\begin_inset Formula $q_{0}$
\end_inset

 to 
\begin_inset Formula $q$
\end_inset

, and a path from 
\begin_inset Formula $q$
\end_inset

 to 
\begin_inset Formula $q_{f}$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Proposition
Given a well-behaved eVset-automaton 
\begin_inset Formula $A$
\end_inset

, there exists a pruned well-behaved eVset automaton 
\begin_inset Formula $A'$
\end_inset

 such that 
\begin_inset Formula $\left\llbracket A'\right\rrbracket =\left\llbracket A\right\rrbracket $
\end_inset

.
 Moreover, 
\begin_inset Formula $A'$
\end_inset

 can be produced in polynomial time.
\end_layout

\begin_layout Proof
To obtain 
\begin_inset Formula $A'$
\end_inset

, it is sufficient to remove from 
\begin_inset Formula $A$
\end_inset

 those states from which we can't reach the final state, those states that
 are unreachable from the initial state, and all the transitions involving
 them.
 This can be done by using Dijkstra's shortest path algorithm, for instance,
 which ensures 
\begin_inset Formula $A'$
\end_inset

 can be found in polynomial time.
 Because of our construction, 
\begin_inset Formula $A'$
\end_inset

 is well-behaved, as all its complete paths are also in 
\begin_inset Formula $A$
\end_inset

.
 We now show that, for every string 
\begin_inset Formula $\mathbf{s},$
\end_inset

 we have 
\begin_inset Formula $A'\left(\mathbf{s}\right)=A\left(\mathbf{s}\right)$
\end_inset

.
 To see that 
\begin_inset Formula $A'\left(\mathbf{s}\right)\subseteq A\left(\mathbf{s}\right)$
\end_inset

, we can notice that each run 
\begin_inset Formula $\rho'$
\end_inset

 of 
\begin_inset Formula $A'$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

 that is accepting can be supported only by a complete path 
\begin_inset Formula $p'$
\end_inset

, which is also in 
\begin_inset Formula $A$
\end_inset

 by construction.
 
\begin_inset Formula $A\left(\mathbf{s}\right)\subseteq A'\left(\mathbf{s}\right)$
\end_inset

 is true as well because we include in 
\begin_inset Formula $A'$
\end_inset

 all the complete paths existing in 
\begin_inset Formula $A$
\end_inset

 so every run 
\begin_inset Formula $p$
\end_inset

 of 
\begin_inset Formula $A$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

 is also a run of 
\begin_inset Formula $A'$
\end_inset

.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Corollary
Given a pruned well-behaved eVset-automaton 
\begin_inset Formula $A$
\end_inset

, for every path
\begin_inset Formula $p$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 
\begin_inset Formula $\textrm{LOps}\left(p\right)$
\end_inset

 contains no duplicates.
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $A$
\end_inset

 is pruned, 
\begin_inset Formula $p$
\end_inset

 is part of a complete path 
\begin_inset Formula $p'$
\end_inset

.
 But 
\begin_inset Formula $A$
\end_inset

 is also well-behaved, so 
\begin_inset Formula $\textrm{LOps}\left(p'\right)$
\end_inset

 contains no duplicates, which implies that 
\begin_inset Formula $\textrm{LOps}\left(p\right)$
\end_inset

 has no duplicates either.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Corollary
\begin_inset CommandInset label
LatexCommand label
name "same-ops"

\end_inset

Given a pruned well-behaved eVset-automaton 
\begin_inset Formula $A$
\end_inset

, and two states 
\begin_inset Formula $q,q'$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

, for every pair of paths 
\begin_inset Formula $p,p'$
\end_inset

 between 
\begin_inset Formula $q$
\end_inset

 and 
\begin_inset Formula $q'$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $\textrm{Ops}\left(p\right)=\textrm{Ops}\left(p'\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $A$
\end_inset

 is pruned, there surely exists a path 
\begin_inset Formula $p^{0}$
\end_inset

 between 
\begin_inset Formula $q_{0}$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

.
 For the same reason, there exists a path 
\begin_inset Formula $p^{f}$
\end_inset

 between 
\begin_inset Formula $q'$
\end_inset

 and 
\begin_inset Formula $q_{f}$
\end_inset

.
 So 
\begin_inset Formula $q$
\end_inset

 and 
\begin_inset Formula $q'$
\end_inset

 appear in two complete paths, which we may call 
\begin_inset Formula $p^{0}pp^{f}$
\end_inset

 and 
\begin_inset Formula $p^{0}p'p^{f}$
\end_inset

, that differ only in the subpaths between 
\begin_inset Formula $q$
\end_inset

 and 
\begin_inset Formula $q'$
\end_inset

.
 If 
\begin_inset Formula $\textrm{Ops}\left(p\right)\neq\textrm{Ops}\left(p'\right)$
\end_inset

, then one of 
\begin_inset Formula $p^{0}pp^{f}$
\end_inset

 and 
\begin_inset Formula $p^{0}p'p^{f}$
\end_inset

 wouldn't satisfy the requirement 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:well-behaved-1,"

\end_inset

 of 
\begin_inset CommandInset ref
LatexCommand ref
reference "well-behaved"

\end_inset

, making 
\begin_inset Formula $A$
\end_inset

 not well-behaved, a contraddiction.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Definition
Given a eVset-automaton 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $A$
\end_inset

 is operation-closed if, for every pair of states 
\begin_inset Formula $q,q'$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

, whenever there exists an operation-only path 
\begin_inset Formula $p$
\end_inset

=
\begin_inset Formula $t_{1},\ldots,t_{n}$
\end_inset

 between 
\begin_inset Formula $q$
\end_inset

 and 
\begin_inset Formula $q'$
\end_inset

, then there exists a transition in 
\begin_inset Formula $A$
\end_inset

 of the form 
\begin_inset Formula $\left(q,\bigcup_{i=1}^{n}\textrm{Ops}\left(t_{i}\right),q'\right)$
\end_inset

.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Proposition
Given a well-behaved eVset-automaton 
\begin_inset Formula $A$
\end_inset

, there exists an operation-closed well-behaved eVset-automaton 
\begin_inset Formula $A'$
\end_inset

 such that 
\begin_inset Formula $\left\llbracket A'\right\rrbracket =\left\llbracket A\right\rrbracket $
\end_inset

.
 Moreover, the size of 
\begin_inset Formula $A'$
\end_inset

 is polynomial in the size of 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Proof
Let us consider 
\begin_inset Formula $A$
\end_inset

 to be of the form 
\begin_inset Formula $\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

.
 Without loss of generality, we can assume that 
\begin_inset Formula $A$
\end_inset

 is pruned.
 Then we can take 
\begin_inset Formula $A'=\left(Q',q_{0}',q_{f}',\delta'\right)$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Q'=Q$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{0}'=q_{0}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{f}'=q_{f}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta'=\delta\cup\left\{ \left(q,\bigcup_{i=1}^{n}\textrm{Ops}\left(t_{i}\right),q'\right)\mid\exists p=t_{1},\ldots,t_{n}\in\textrm{Paths}\left(A\right):p=p_{q}^{q'}\textrm{, \ensuremath{p} is operation-only}\right\} $
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
This construction does nothing but including the transitions that are missing
 in 
\begin_inset Formula $A$
\end_inset

 to be operation-closed in 
\begin_inset Formula $A'$
\end_inset

.
 We now show that for every string 
\begin_inset Formula $\mathbf{s}\in\varSigma^{\ast}$
\end_inset

, 
\begin_inset Formula $A'\left(\mathbf{s}\right)=A\left(\mathbf{s}\right)$
\end_inset

.
 To see that 
\begin_inset Formula $A'\left(\mathbf{s}\right)\subseteq A\left(\mathbf{s}\right)$
\end_inset

, consider an accepting run 
\begin_inset Formula $\rho'$
\end_inset

 of 
\begin_inset Formula $A'$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

, that returns an 
\begin_inset Formula $\mathbf{s}$
\end_inset

-tuple 
\begin_inset Formula $\mu$
\end_inset

.
 This run is supported by a complete path 
\begin_inset Formula $p'$
\end_inset

 in 
\begin_inset Formula $A'$
\end_inset

.
 We can always find a complete path 
\begin_inset Formula $p$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 that supports a run 
\begin_inset Formula $\rho$
\end_inset

 of 
\begin_inset Formula $A$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

, which returns 
\begin_inset Formula $\mu$
\end_inset

 as well.
 To obtain 
\begin_inset Formula $p$
\end_inset

, we substitute every operations transition 
\begin_inset Formula $t$
\end_inset

 in 
\begin_inset Formula $p'$
\end_inset

 that doesn't belong to 
\begin_inset Formula $\delta$
\end_inset

 with a operation-only path 
\begin_inset Formula $p''$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 such that 
\begin_inset Formula $\textrm{LOps}\left(p''\right)=\textrm{LOps}\left(t\right)$
\end_inset

 and 
\begin_inset Formula $p''$
\end_inset

 is between the source and destination states of 
\begin_inset Formula $t$
\end_inset

.
 This is always possible by construction of 
\begin_inset Formula $A'$
\end_inset

.
 It is easy to verify that the run 
\begin_inset Formula $\rho$
\end_inset

 of 
\begin_inset Formula $A$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

, supported by 
\begin_inset Formula $p$
\end_inset

, returns indeed 
\begin_inset Formula $\mu$
\end_inset

.
 
\begin_inset Formula $A\left(\mathbf{s}\right)\subseteq A\left('\mathbf{s}\right)$
\end_inset

 is also true, because we include all the transitions belonging to 
\begin_inset Formula $\delta$
\end_inset

 in 
\begin_inset Formula $\delta'$
\end_inset

.
 The fact that the size of 
\begin_inset Formula $A'$
\end_inset

 is polynomial in the size of 
\begin_inset Formula $A$
\end_inset

 follows from the fact that we add 
\begin_inset Formula $O\left(\left|Q^{2}\right|\right)$
\end_inset

 new transitions to 
\begin_inset Formula $\delta$
\end_inset

 to form 
\begin_inset Formula $\delta'$
\end_inset

.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Definition
Given two well-behaved operation-closed eVset-automata 
\begin_inset Formula $A=\left(Q_{A},q_{A}^{0},q_{A}^{f},\delta_{A}\right)$
\end_inset

 and 
\begin_inset Formula $B=\left(Q_{B},q_{B}^{0},q_{B}^{f},\delta_{B}\right)$
\end_inset

, their product is a eVset-automaton 
\begin_inset Formula $C=\left(Q,q^{0},q^{f},\delta\right)$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Q=Q_{A}\times Q_{B}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q^{0}=\left\langle q_{A}^{0},q_{B}^{0}\right\rangle $
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q^{f}=\left\langle q_{A}^{f},q_{B}^{f}\right\rangle $
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta$
\end_inset

 has the following transitions:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\left(\left\langle q_{A},q_{B}\right\rangle ,\sigma,\left\langle q'_{A},q'_{B}\right\rangle \right)$
\end_inset

 whenever 
\begin_inset Formula $\sigma\in\varSigma$
\end_inset

, 
\begin_inset Formula $\left(q_{A},\sigma,q'_{A}\right)\in\delta_{A}$
\end_inset

 and 
\begin_inset Formula $\left(q_{B},\sigma,q'_{B}\right)\in\delta_{B}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(\left\langle q_{A},q_{B}\right\rangle ,S_{A}\cup S_{B},\left\langle q'_{A},q'_{B}\right\rangle \right)$
\end_inset

 whenever 
\begin_inset Formula $\left(q_{A},S_{A},q'_{A}\right)\in\delta_{A}$
\end_inset

, 
\begin_inset Formula $\left(q_{B},S_{B},q'_{B}\right)\in\delta_{B}$
\end_inset

 and 
\begin_inset Formula $\left(\textrm{SVOps}\left(A\right)\cap\textrm{SVOps}\left(B\right)\right)\cap S_{A}=\left(\textrm{SVOps}\left(A\right)\cap\textrm{SVOps}\left(B\right)\right)\cap S_{B}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(\left\langle q_{A},q_{B}\right\rangle ,S_{A},\left\langle q'_{A},q{}_{B}\right\rangle \right)$
\end_inset

 whenever 
\begin_inset Formula $\left(q_{A},S_{A},q'_{A}\right)\in\delta_{A}$
\end_inset

 and 
\begin_inset Formula $\left(\textrm{SVOps}\left(A\right)\cap\textrm{SVOps}\left(B\right)\right)\cap S_{A}=\textrm{Ø}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(\left\langle q_{A},q_{B}\right\rangle ,S_{B},\left\langle q{}_{A},q'_{B}\right\rangle \right)$
\end_inset

 whenever 
\begin_inset Formula $\left(q_{B},S_{B},q'_{B}\right)\in\delta_{B}$
\end_inset

 and 
\begin_inset Formula $\left(\textrm{SVOps}\left(A\right)\cap\textrm{SVOps}\left(B\right)\right)\cap S_{B}=\textrm{Ø}$
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Definition
We may write 
\begin_inset Formula $C=A\times B$
\end_inset

.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Definition
Given two well-behaved operation-closed eVset-automata 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, and given an eVset-automaton 
\begin_inset Formula $C$
\end_inset

 such that 
\begin_inset Formula $C=A\times B$
\end_inset

, the projection of a transition 
\begin_inset Formula $t$
\end_inset

 in 
\begin_inset Formula $C$
\end_inset

 over 
\begin_inset Formula $A$
\end_inset

 is a transition 
\begin_inset Formula $t'$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 defined as:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\left(q_{A},\sigma,q'_{A}\right)$
\end_inset

 if 
\begin_inset Formula $t=\left(\left\langle q_{A},q_{B}\right\rangle ,\sigma,\left\langle q'_{A},q'_{B}\right\rangle \right)$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\left(q_{A},S_{A},q'_{A}\right)$
\end_inset

 if 
\begin_inset Formula $t=\left(\left\langle q_{A},q_{B}\right\rangle ,S_{A}\cup S_{B},\left\langle q'_{A},q'_{B}\right\rangle \right)$
\end_inset

 or 
\shape italic

\begin_inset Formula $t=\left(\left\langle q_{A},q_{B}\right\rangle ,S_{A},\left\langle q'_{A},q{}_{B}\right\rangle \right)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Definition
We may write 
\begin_inset Formula $t'=\pi_{A}\left(t\right)$
\end_inset

.
 The definition is symmetric for the projection over 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Definition
Given two well-behaved operation-closed eVset-automata 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, and given an eVset-automaton 
\begin_inset Formula $C$
\end_inset

 such that 
\begin_inset Formula $C=A\times B$
\end_inset

, the projection of a path 
\begin_inset Formula $p=t_{1},\ldots,t_{n}$
\end_inset

 in 
\begin_inset Formula $C$
\end_inset

 over 
\begin_inset Formula $A$
\end_inset

 is a path 
\begin_inset Formula $p'$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 defined as:
\begin_inset Formula 
\[
t'_{1},\ldots t'
\]

\end_inset


\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Theorem
Given two well-behaved operation-closed eVset-automata 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, and given an eVset-automaton 
\begin_inset Formula $C$
\end_inset

 such that 
\begin_inset Formula $C=A\times B$
\end_inset

, then 
\begin_inset Formula $\left\llbracket C\right\rrbracket =\left\llbracket A\right\rrbracket \bowtie\left\llbracket B\right\rrbracket $
\end_inset

.
\end_layout

\begin_layout Proof
To show that 
\begin_inset Formula $\left\llbracket C\right\rrbracket \subseteq\left\llbracket A\right\rrbracket \bowtie\left\llbracket B\right\rrbracket $
\end_inset

, we can easily decompose a run of 
\begin_inset Formula $C$
\end_inset

 on a string 
\begin_inset Formula $\mathbf{s}$
\end_inset

 into two consistent runs of 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 To show that 
\begin_inset Formula $\left\llbracket A\right\rrbracket \bowtie\left\llbracket B\right\rrbracket \subseteq\left\llbracket C\right\rrbracket $
\end_inset

, consider a string 
\begin_inset Formula $\mathbf{s}$
\end_inset

, a 
\begin_inset Formula $\mathbf{s}$
\end_inset

-tuple 
\begin_inset Formula $\mu_{A}\in A\left(\mathbf{s}\right)$
\end_inset

 and a 
\begin_inset Formula $\mathbf{s}$
\end_inset

-tuple 
\begin_inset Formula $\mu_{B}\in B\left(\mathbf{s}\right)$
\end_inset

 that agrees with 
\begin_inset Formula $\mu_{A}$
\end_inset

 on common variables.
 Given the 
\begin_inset Formula $\mathbf{s}$
\end_inset

-tuple 
\begin_inset Formula $\mu$
\end_inset

 that yelds all the variable assignments of 
\begin_inset Formula $\mu_{A}$
\end_inset

 and 
\begin_inset Formula $\mu_{B}$
\end_inset

.
 We need to find a run 
\begin_inset Formula $\rho$
\end_inset

 of 
\begin_inset Formula $C$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

 that returns 
\begin_inset Formula $\mu$
\end_inset

.
 Let us call 
\begin_inset Formula $\rho_{A}\in\textrm{ARuns}\left(A,\mathbf{s}\right)$
\end_inset

 and 
\begin_inset Formula $\rho_{B}\in\textrm{ARuns}\left(B,\mathbf{s}\right)$
\end_inset

 the runs that return 
\begin_inset Formula $\mu_{A}$
\end_inset

 and 
\begin_inset Formula $\mu_{B}$
\end_inset

, respectively.
 We can obtain 
\begin_inset Formula $\rho$
\end_inset

 by combining 
\begin_inset Formula $\rho_{A}$
\end_inset

 and 
\begin_inset Formula $\rho_{B}$
\end_inset

.
 To do that, we first need to ensure that 
\begin_inset Formula $\rho_{A}$
\end_inset

 and 
\begin_inset Formula $\rho_{B}$
\end_inset

 are consistent on the order of the variable operations they perform.
 Since 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 are well-behaved and operation-closed, 
\begin_inset Formula $\rho_{A}$
\end_inset

 and 
\begin_inset Formula $\rho_{B}$
\end_inset

 can always be selected so that they are consistent.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Lemma
\noindent
Given an extended varable-set automaton 
\begin_inset Formula $A=\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

, 
\begin_inset Formula $A$
\end_inset

 can be converted into an equivalent variable-set automaton 
\begin_inset Formula $A'$
\end_inset

 in polynomial time in a well-behavedness preserving manner.
\end_layout

\begin_layout Proof
Without loss of generality, we consider an ordering of the symbols in 
\begin_inset Formula $\textrm{SVOps}\left(A\right)$
\end_inset

 of the following form:
\begin_inset Formula 
\[
x\vdash,\ldots,y\vdash,x\dashv,\ldots,y\dashv
\]

\end_inset

 In this ordering, all insertion operations come before the deletion operations.
 We define 
\begin_inset Formula $o\prec o'$
\end_inset

, 
\begin_inset Formula $o,o'\in\textrm{SVOps}\left(A\right)$
\end_inset

, if 
\begin_inset Formula $o$
\end_inset

 comes before 
\begin_inset Formula $o'$
\end_inset

 (
\emph on
not
\emph default
 if they are equal) in the chosen ordering.
 Consider 
\begin_inset Formula $A'=$
\end_inset


\begin_inset Formula $\left(Q',q_{0}',q_{f}',\delta'\right)$
\end_inset

, with 
\begin_inset Formula $\textrm{SVars}\left(A'\right)=\textrm{SVars}\left(A\right)$
\end_inset

, whose components are defined as follows:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Q'=Q\cup Q^{\textrm{ops}}\cup Q^{\textrm{Ø}}$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Q^{\textrm{ops}}=\left\{ q_{q',o,q''}\mid\exists\left(q',S,q''\right)\in\delta:o\in S\right\} $
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $Q^{\textrm{Ø}}=\left\{ q_{\textrm{q',Ø,q''}}\mid\exists\left(q',\textrm{Ø},q''\right)\in\delta\right\} $
\end_inset

;
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $q_{0}'=q_{0};$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{f}'=q_{f}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta'=\left(\delta\setminus\delta^{S}\right)\cup\delta^{\textrm{ops}}\cup\delta^{\textrm{Ø}}\cup\delta^{\varepsilon}$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\delta^{S}=\left\{ \left(q,S,q'\right)\in\delta\right\} ;$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta^{\textrm{ops}}=\left\{ \left(q_{q',o,q''},o,q_{q',o',q''}\right)\mid\exists\left(q',S,q''\right)\in\delta:\left(o,o'\epsilon S\land o\prec o'\land\forall o''\in S:o\nprec o''\nprec o'\right)\right\} \cup\left\{ \left(q_{q',o,q''},o,q''\right)\mid\exists\left(q',S,q''\right)\in\delta:\left(o\epsilon S\land\forall o'\in S:o\nprec o'\right)\right\} $
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta^{\textrm{Ø}}=\left\{ \left(q_{\textrm{q',Ø,q''}},\varepsilon,q''\right)\mid\exists\left(q',\textrm{Ø},q''\right)\in\delta\right\} ;$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta^{\varepsilon}=\left\{ \left(q,\varepsilon,q'\right)\mid\left(\exists\left(q',o,q''\right)\in\delta^{\textrm{ops}}:\forall\left(q',o',q''\right)\in\delta^{\textrm{ops}}:o'\nprec o\right)\lor\left(\exists\left(q',\varepsilon,q''\right)\in\delta^{\textrm{Ø}}\right)\right\} $
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Proof
This construction expands the transitions of 
\begin_inset Formula $A$
\end_inset

 that are labeled with a set of variable operations into a sequence of transitio
ns performing one operation at a time, taking care of putting the insertion
 operations before the deletion ones, thus preserving well-behavedness.
 It also substitutes transitions labeled with the empty set with ordinary
 
\begin_inset Formula $\varepsilon-$
\end_inset

transitions.
 To prove equivalence between 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $A'$
\end_inset

 it is sufficient to notice that for every string 
\begin_inset Formula $\mathbf{s}$
\end_inset

, every run 
\begin_inset Formula $\rho=c_{0},\ldots,c_{m}$
\end_inset


\begin_inset Formula $\in\textrm{ARuns}\left(A,\mathbf{s}\right)$
\end_inset

 can be put in correspondence with a run 
\begin_inset Formula $\rho'\in\textrm{ARuns}\left(A',\mathbf{s}\right)$
\end_inset

.
 Indeed, for every pair of consecutive configurations 
\begin_inset Formula $c_{j}=\left(q_{j},V_{j},Y_{j},i_{j}\right)$
\end_inset

, 
\begin_inset Formula $c_{j+1}=\left(q_{j+1},V_{j+1},Y_{j+1},i_{j+1}\right)$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
if 
\begin_inset Formula $i_{j}=i_{j+1}$
\end_inset

 and 
\begin_inset Formula $\left(q,S,q'\right)$
\end_inset


\begin_inset Formula $\in\delta$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize
if 
\begin_inset Formula $V_{j}\neq V_{j+1}$
\end_inset

, replace 
\begin_inset Formula $c_{j}$
\end_inset

, 
\begin_inset Formula $c_{j+1}$
\end_inset

 with a sequence 
\begin_inset Formula $c_{j,1},\ldots,c_{j,k}$
\end_inset

 of configurations, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $c_{j,1}=c_{j}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $c_{j,k}=c_{j+1}$
\end_inset

; 
\end_layout

\begin_layout Itemize
\begin_inset Formula $c_{j,2}=\left(q_{j,2},V_{j,1},Y_{j,1},i_{j}\right)$
\end_inset

 (
\begin_inset Formula $\left(q_{j,1},\varepsilon,q_{j,2}\right)\in\delta^{\varepsilon})$
\end_inset

;
\end_layout

\begin_layout Itemize
for every pair 
\begin_inset Formula $c_{j,l}=\left(q_{j,l},V_{j,l},Y_{j,l},i_{j}\right),c_{j,l+1}=\left(q_{j,l+1},V_{j,l+1},Y_{j,l+1},i_{j}\right)$
\end_inset

, different from 
\begin_inset Formula $c_{j,1},c_{j,2}$
\end_inset

, there exists a transition 
\begin_inset Formula $\left(q_{j,l},o,q_{j,l+1}\right)\in\delta^{\textrm{ops}}$
\end_inset

 such that 
\begin_inset Formula $o\in S$
\end_inset

 and 
\begin_inset Formula $V_{j,l+1},Y_{j,l+1}$
\end_inset

 are obtained from 
\begin_inset Formula $V_{j,l},Y_{j,l}$
\end_inset

 according to 
\begin_inset Formula $o$
\end_inset

;
\end_layout

\end_deeper
\begin_layout Itemize
if 
\begin_inset Formula $V_{j}=V_{j+1}$
\end_inset

, replace 
\begin_inset Formula $c_{j}$
\end_inset

, 
\begin_inset Formula $c_{j+1}$
\end_inset

with 
\begin_inset Formula $c_{j,1},c_{j,2},c_{j,3}$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $c_{j,1}$
\end_inset

 and 
\begin_inset Formula $c_{j,2}$
\end_inset

 are as in the previous case;
\end_layout

\begin_layout Itemize
\begin_inset Formula $c_{j,3}=c_{j+1}$
\end_inset

;
\end_layout

\begin_layout Itemize
there exists a transition 
\begin_inset Formula $\left(q_{j,2},\textrm{Ø},q_{j,3}\right)\in\delta^{\textrm{Ø}}$
\end_inset

 and 
\begin_inset Formula $V_{j,3}=V_{j,l}$
\end_inset

, 
\begin_inset Formula $Y_{j,3}=Y_{j,2}$
\end_inset

;
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
if 
\begin_inset Formula $i_{j+1}=i_{j}+1$
\end_inset

, do nothing.
\end_layout

\end_deeper
\begin_layout Proof
After having applied this modifications to 
\begin_inset Formula $\rho$
\end_inset

, the obtained run 
\begin_inset Formula $\rho'$
\end_inset

 will be a valid run of 
\begin_inset Formula $A'$
\end_inset

 on 
\begin_inset Formula $\mathbf{s}$
\end_inset

 and it will be accepting if and only if 
\begin_inset Formula $\rho$
\end_inset

 was accepting, in which case it will return the same 
\begin_inset Formula $\mathbf{s}-$
\end_inset

tuple returned by 
\begin_inset Formula $\rho$
\end_inset

.
 This is because the only occasions where we actually modify 
\begin_inset Formula $\rho$
\end_inset

 is when we are performing variable operations between a configuration and
 the next one.
 In this case, we are not advancing the string pointer.
 The new series of configurations we put in place of the original pair doesn't
 advance the pointer either, and it performs the exact variable operations
 that were performed before the substitution, insertions first, thanks to
 the way we constructed 
\begin_inset Formula $A'$
\end_inset

.
 Thus, for every pair of configurations 
\begin_inset Formula $c_{j},c_{j+1}\in\rho$
\end_inset

 that we replace, 
\begin_inset Formula $c_{j+2}$
\end_inset

 won't see any difference.
 Also notice how the replaced sequence 
\begin_inset Formula $c_{j,1},\ldots,c_{j,k}$
\end_inset

 is unique, and the sequence of operations from 
\begin_inset Formula $c_{j,1}$
\end_inset

 to 
\begin_inset Formula $c_{j,k}$
\end_inset

 respect the operation ordering that we chose.
 It can also easily be verified that well-behavedness is preserved.
\end_layout

\begin_layout Proof
\noindent
It remains to show that the construction of 
\begin_inset Formula $A'$
\end_inset

 can be carried in polynomial time.
 Let us refer to the size of 
\begin_inset Formula $A$
\end_inset

 as 
\begin_inset Formula $n$
\end_inset

.
 We consider 
\begin_inset Formula $n=\left|Q\right|+\left|\delta\right|+\left|\textrm{SVars}\left(A\right)\right|$
\end_inset

.
 We can reasonably assume that the operations of adding a new state, adding
 a new transition, removing a state and removing a transition take constant
 time.
 Thus, expanding a single transition of 
\begin_inset Formula $A$
\end_inset

 takes 
\begin_inset Formula $O\left(\left|\textrm{SVars}\left(A\right)\right|\right)=O\left(n\right)$
\end_inset

 time.
 Expanding every transition that is needed will then take 
\begin_inset Formula $O\left(\left|\textrm{SVars}\left(A\right)\right|\cdot\left|\delta\right|\right)=O\left(n^{2}\right)$
\end_inset

 time.
\end_layout

\begin_layout Proof
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Definition
\noindent
Given an extended vset-automaton 
\begin_inset Formula $A$
\end_inset

, the epsilon-closure of 
\begin_inset Formula $A$
\end_inset

 is an extended vset-automaton 
\begin_inset Formula $A'=\left(Q',q_{0}',q_{f}',\delta'\right)$
\end_inset

 , where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Q'=Q$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{0}'=q_{0}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{f}'=q_{f}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta\subseteq\delta'$
\end_inset

;
\end_layout

\begin_layout Itemize
for every sequence of triples 
\begin_inset Formula $\left(q_{1},S_{1},q'_{1}\right),\ldots,\left(q_{n},S_{n},q'_{n}\right)\in\delta$
\end_inset

 such that 
\begin_inset Formula $\forall i$
\end_inset

,
\begin_inset Formula $1\leq i<n$
\end_inset

 we have 
\begin_inset Formula $q'_{i}=q_{i+1}$
\end_inset

, 
\begin_inset Formula $\delta'$
\end_inset

 contains a triple 
\begin_inset Formula $\left(q_{1},\bigcup_{i}S_{i},q_{n}\right)$
\end_inset

 and no additional triples that don't belong to 
\begin_inset Formula $\delta$
\end_inset

.
\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Theorem
\noindent
Given two extended vset-automata 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 that are union-compatible, a third vset-automaton 
\begin_inset Formula $C$
\end_inset

 can be produced in polynomial time such that 
\begin_inset Formula $\left\llbracket C\right\rrbracket =\left\llbracket A\right\rrbracket \cup\left\llbracket B\right\rrbracket $
\end_inset

, in a well-behavedness preserving manner.
\end_layout

\begin_layout Proof
Let us consider 
\begin_inset Formula $A$
\end_inset

 to be of the form 
\begin_inset Formula $\left(Q^{A},q_{0}^{A},q_{f}^{A},\delta^{A}\right)$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 of the form 
\begin_inset Formula $\left(Q^{B},q_{0}^{B},q_{f}^{B},\delta^{B}\right)$
\end_inset

.
 We can take 
\begin_inset Formula $C=\left(Q^{C},q_{0}^{C},q_{f}^{C},\delta^{C}\right)$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Q^{C}=Q^{A}\cup Q^{B}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{0}^{C}=q_{0}^{A}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{f}^{C}=q_{f}^{A}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta^{C}=\delta^{A}\cup\delta^{B}\cup\left\{ \left(q_{0}^{C},\textrm{Ø},q_{0}^{B}\right),\left(q_{f}^{B},\textrm{Ø},q_{f}^{C}\right)\right\} $
\end_inset

.
\end_layout

\end_deeper
\begin_layout Proof
In this construction, we allow to go from the initial state of 
\begin_inset Formula $A$
\end_inset

 to the one of 
\begin_inset Formula $B$
\end_inset

, and to go from the final state of 
\begin_inset Formula $B$
\end_inset

 to the one of 
\begin_inset Formula $A$
\end_inset

.
 Thus, given a string 
\begin_inset Formula $\mathbf{s}$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

 can span exactly the 
\begin_inset Formula $\left(V,\mathbf{s}\right)-$
\end_inset

tuples contained in 
\begin_inset Formula $A\left(\mathbf{s}\right)\cup B\left(\mathbf{s}\right)$
\end_inset

.
 Regarding the complexity, the operations that we perform here are the union
 of the states sets and transition functions, with the addition of two new
 transitions.
 Let us consider the size of the input as 
\begin_inset Formula $n=n_{A}+n_{B}=\left|Q^{A}\right|+\left|\delta^{A}\right|+\left|\textrm{SVars}\left(A\right)\right|+\left|Q^{B}\right|+\left|\delta^{B}\right|+\left|\textrm{SVars}\left(B\right)\right|$
\end_inset

.
 If we assume the costs of basic operations as adding/deleting a state/transitio
ns to be constant, then obtaining 
\begin_inset Formula $Q^{C}$
\end_inset

 takes 
\begin_inset Formula $O\left(\left|Q^{B}\right|\right)=O\left(n\right)$
\end_inset

 time, and constructing 
\begin_inset Formula $\delta^{C}$
\end_inset

 takes 
\begin_inset Formula $O\left(\left|\delta^{B}\right|\right)=O\left(n\right)$
\end_inset

 time.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Theorem
\noindent
Given a well-behaved extended vset-automaton 
\begin_inset Formula $A$
\end_inset

, a set 
\begin_inset Formula $X=\textrm{SVars}\left(A\right)$
\end_inset

 and a set 
\begin_inset Formula $Y\subseteq X$
\end_inset

, a vset-automaton 
\begin_inset Formula $A'$
\end_inset

 can be produced in polynomial time such that 
\begin_inset Formula $\left\llbracket A'\right\rrbracket =\pi_{Y}\left\llbracket A\right\rrbracket $
\end_inset

, in a well-behavedness preserving manner.
\end_layout

\begin_layout Proof
Let us consider 
\begin_inset Formula $A=\left(Q,q_{0},q_{f},\delta\right)$
\end_inset

.
 We can take 
\begin_inset Formula $A'=\left(Q',q_{0}',q_{f}',\delta'\right)$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $Q'=Q$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{0}'=q_{0}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $q_{f}'=q_{f}$
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta'=\delta\setminus\delta^{\textrm{unprojected}}\cup\delta^{\textrm{projected}}$
\end_inset

, where:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\delta^{\textrm{unprojected}}=\left\{ \left(q,S,q'\right)\in\delta\mid S\cap\textrm{SVOps}\left(X\setminus Y\right)\neq\textrm{Ø}\right\} $
\end_inset

;
\end_layout

\begin_layout Itemize
\begin_inset Formula $\delta^{\textrm{projected}}=\left\{ \left(q,S',q'\right)\mid\exists\left(q,S,q'\right)\in\delta^{\textrm{unprojected}}:S'=S\setminus\textrm{SVOps}\left(X\setminus Y\right)\right\} $
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Proof
This construction removes all the occurencies of variable operations that
 concern variables excluded from the projection in the transitions of 
\begin_inset Formula $A$
\end_inset

.
 Since 
\begin_inset Formula $A$
\end_inset

 is well behaved, we have the guarantee that 
\begin_inset Formula $A'=A$
\end_inset

.
 If this wasn't the case, our construction might result in 
\begin_inset Formula $A\subseteq A'$
\end_inset

.
 
\begin_inset Formula $A'$
\end_inset

 is still well-behaved, since we maintain the occurrencies of operations
 concerning the variables on which we project, that continue to appear exactly
 once on each path.
 With the usual assumptions, this construction can be carried out in 
\begin_inset Formula $O\left(n\right)$
\end_inset

.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
An AQL core fragment is an AQL fragment that can be associated with a core
 spanner.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Theorem
Given a regex formula 
\begin_inset Formula $\gamma$
\end_inset

, 
\begin_inset Formula $\gamma$
\end_inset

 can be converted into an equivalent, well-behaved extended vset-automaton
 
\begin_inset Formula $A$
\end_inset

 in polynomial time.
\end_layout

\end_body
\end_document
